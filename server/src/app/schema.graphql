type Query {
   tours(filter: String, page: Int, orderBy: ToursOrderBy): [Tour!]!,
   tour(tourId: ID!): Tour
}

type Mutation {
   addComment(tourId: ID!, text: String!): Comment
   signup(name: String!, password: String!): AuthPayload
   login(name: String!, password: String!): AuthPayload
}

type Subscription {
   newComment: Comment!
}

# TODO add pictures
type Tour {
   id: ID!,
   name: String!,
   description: String,
   #country? instead of price and transport
   price: Float!,
   transport: String,
   comments: [Comment!]!
}

type Comment {
   id: ID!,
   text: String!,
   createdBy: User!,
   createdAt: DateTime,
   tour: Tour!
}

type User {
   id: ID!,
   name: String!
}

type AuthPayload {
   token: String,
   user: User
}

# custom scalar type from graphql-iso-date library
scalar DateTime

enum ToursOrderBy {
   nameAsc,
   nameDesc,
   priceAsc,
   priceDesc
}