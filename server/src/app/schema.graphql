type Query {
   tours(skip: Int, first: Int, orderBy: ToursOrderBy): Tours
   tour(tourId: ID!): Tour
}

type Mutation {
   addComment(tourId: ID!, text: String!): Comment
   signup(name: String!, password: String!): AuthPayload
   login(name: String!, password: String!): AuthPayload
}

type Subscription {
   newComment: Comment!
}

type Tours {
   total: Int! # total of all tours, not only those that are returned
   tours: [Tour!]!
}

type Tour {
   id: ID!
   name: String!
   description: String
   #country? instead of price and transport
   comments: [Comment!]!
}

type Comment {
   id: ID!
   text: String!
   createdBy: User!
   createdAt: DateTime
   tour: Tour!
}

type User {
   id: ID!
   name: String!
}

type AuthPayload {
   token: String
   user: User
}

# custom scalar type from graphql-iso-date library
scalar DateTime

enum ToursOrderBy {
   nameAsc
   nameDesc
}